#!/usr/bin/env bash

# This script serves as the build step for scipy/numpy and other packages
# that  depend on numpy and sciypy for the
# [**Python Buildpack**](https://github.com/heroku/heroku-buildpack-python) 
# compiler. 
# 
# A [buildpack](http://devcenter.heroku.com/articles/buildpacks) is an 
# adapter between a Python application and Heroku's runtime.
#
# This script is invoked by [`bin/compile`](/).
VENDORED_GIT_NAME="npscipy-binaries"
VENDORED_GIT_REPO="https://github.com/joshowen/$VENDORED_GIT_NAME.git"
# The location of the pre-compiled atlas/lapack/blas/gfortran binaries.
VENDORED_BINARIES="npscipy"

PACKAGES=("bottleneck-0.7.0" "numexpr-2.2.2" "numpy-1.8.0" "pandas-0.12.0" "sklearn-0.14.1" "scipy-0.13.2")

if (grep -iq -e "numpy" -e "scipy" -e "pandas" requirements.txt) then
  echo "-----> Noticed numpy/scipy/pandas/scikit-learn. Bootstrapping prebuilt binaries."
  cd .heroku
  rm -rf $VENDORED_GIT_NAME
  git clone -n $VENDORED_GIT_REPO --depth 1
  ## set BLAS/LAPACK/ATLAS
  echo "-----> Creating/downloading binaries."
  # Download and extract everything into target vendor directory.
  #git clone ${VENDORED_GIT_REPO} > /dev/null
  cd $VENDORED_GIT_NAME
  git checkout HEAD $VENDORED_BINARIES.tar.gz
  cd ..
  tar xf "$VENDORED_GIT_NAME/$VENDORED_BINARIES.tar.gz"
  echo "-----> heroku contents: $(ls)"
  echo "-----> heroku binaries contents: $(ls ${VENDORED_GIT_NAME})"
    
  export BLAS=$(pwd)/vendor/lib/atlas-base/atlas/libblas.a
  export LAPACK=$(pwd)/vendor/lib/atlas-base/atlas/liblapack.a
  export ATLAS=$(pwd)/vendor/lib/atlas-base/libatlas.a
  export LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/lib/atlas-base:$(pwd)/lib/atlas-base/atlas:$LIBRARY_PATH
  export LD_LIBRARY_PATH=$(pwd)/vendor/lib:$(pwd)/vendor/lib/atlas-base:$(pwd)/vendor/lib/atlas-base/atlas:$LD_LIBRARY_PATH
  
  cd $VENDORED_GIT_NAME
  git pull origin
  cd ..
  
  for PACKAGE in "${PACKAGES[@]}"
  do
    echo "-----> Creating/downloading $PACKAGE."

    cd $VENDORED_GIT_NAME
    NAME="$PACKAGE"
    git checkout HEAD $NAME.tar.gz

    cd ../python
    tar xf "../$VENDORED_GIT_NAME/$NAME.tar.gz"
    echo "-----> Completed Creating/downloading $PACKAGE by unzipping $VENDORED_GIT_NAME/$NAME.tar.gz."
    cd ..
  done
  rm -rf $VENDORED_GIT_NAME
  cd ..
fi
